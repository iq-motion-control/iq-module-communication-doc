.. include:: ../text_colors.rst
.. toctree::

.. _client_reference_tables:

***********************************************
Client Table Reference
***********************************************
Type ID 5 | System Control
===========================
    .. table:: System Control
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | Sub ID |     Short Name      |     Access     | Data Type | Unit                |                               Note                                |
        +========+=====================+================+===========+=====================+===================================================================+
        | 0      | reboot_program      | set            |           |                     | Reboots the motor controller with saved values                    |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 1      | reboot_boot_loader  | set            |           |                     | Reboots into the boot loader                                      |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 2      | dev_id              | get            | uint16    |                     |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 3      | rev_id              | get            | uint16    |                     |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 4      | uid1                | get            | uint32    |                     |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 5      | uid2                | get            | uint32    |                     |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 6      | uid3                | get            | uint32    |                     |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 7      | mem_size            | get            | uint16    | :math:`\text{Kb}`   |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 8      | build_year          | get            | uint16    | :math:`\text{year}` |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 9      | build_month         | get            | uint8     | :math:`\text{mon}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 10     | build_day           | get            | uint8     | :math:`\text{day}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 11     | build_hour          | get            | uint8     | :math:`\text{hour}` |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 12     | build_minute        | get            | uint8     | :math:`\text{min}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 13     | build_second        | get            | uint8     | :math:`s`           |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 14     | module_id           | get, set, save | uint8     | :math:`\text{ID}`   | The ID used for all obj_id on this module                         |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 15     | time                | get, set       | float     | :math:`s`           | Internal clock time. If unchanged through software this is uptime |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 16     | firmware_version    | get            | uint32    | :math:`\text{ver}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 17     | hardware_version    | get, set, save | uint32    | :math:`\text{ver}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 18     | electronics_version | get, set, save | uint32    | :math:`\text{ver}`  |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+
        | 19     | firmware_valid      | get            | uint8     | :math:`\text{bool}` |                                                                   |
        +--------+---------------------+----------------+-----------+---------------------+-------------------------------------------------------------------+

Type ID 11 | Persistent Memory
=================================================
    .. table:: Persistent Memory
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+-------------------+--------+-----------+------------------+---------------------------------------------------------------------------------------------+
        | Sub ID | Short Name        | Access | Data Type | Unit             | Note                                                                                        |
        +========+===================+========+===========+==================+=============================================================================================+
        | 0      | erase             | set    |           |                  | Erases all saved values including calibration data and product key. Highly not recommended. |
        +--------+-------------------+--------+-----------+------------------+---------------------------------------------------------------------------------------------+
        | 1      | revert_to_default | set    |           |                  | Erases all saved values except for those set in factory.                                    |
        +--------+-------------------+--------+-----------+------------------+---------------------------------------------------------------------------------------------+
        | 2      | format_key_1      | set    | uint32    | :math:`12345678` | (Required) Set 12345678 to perform erase or revert_to_default.                              |
        +--------+-------------------+--------+-----------+------------------+---------------------------------------------------------------------------------------------+
        | 3      | format_key_2      | set    | uint32    | :math:`11223344` | (Required) Set 11223344 to perform erase or revert_to_default.                              |
        +--------+-------------------+--------+-----------+------------------+---------------------------------------------------------------------------------------------+

Type ID 16 | Serial Interface
=================================================
    .. table:: Serial Interface
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------+----------+-----------+---------------------+--------------------------------------------------------------------+
        | Sub ID | Short Name |  Access  | Data Type | Unit                |                                Note                                |
        +========+============+==========+===========+=====================+====================================================================+
        | 0      | baud_rate  | get, set | uint32    | :math:`\text{Hz}`   | Default is 115200. Reliable up to 2Mbps. Set also performs a save. |
        +--------+------------+----------+-----------+---------------------+--------------------------------------------------------------------+

Type ID 50 | Brushless Drive
=================================================
    .. table:: Brushless Drive
        :widths: 8 18 15 10 5 50
        :class: tight-table


        | Sub ID | Short Name                    | Access         | Data Type | Unit                                   | Note                                                                                                                                                                                                                                                                                                                                                                                                        |
        +========+===============================+================+===========+========================================+=============================================================================================================================================================================================================================================================================================================================================================================================================+
        | 0      | drive_mode                    | get            | uint8     | :math:`\text{Enum}`                    | 0 = phase_pwm, 1 = phase_volts, 2 = spin_pwm, 3 = spin_volts, 4 = brake, 5 = coast                                                                                                                                                                                                                                                                                                                          |

        | 1      | drive_phase_pwm               | set            | float     | :math:`\text{PWM}`                     | This value is used in open loop (gimbal) mode with this throttle [-1, 1] and is used with phase_angle.                                                                                                                                                                                                                                                                                                      |

        | 2      | drive_phase_volts             | set            | float     | :math:`\text{V}`                       | This value is used in open loop (gimbal) mode with this voltage and is used with phase_angle.                                                                                                                                                                                                                                                                                                               |

        | 3      | drive_spin_pwm                | set            | float     | :math:`\text{PWM}`                     | This spins motor with this throttle [-1, 1].                                                                                                                                                                                                                                                                                                                                                                |

        | 4      | drive_spin_volts              | set            | float     | :math:`\text{V}`                       | This spins motor with this voltage.                                                                                                                                                                                                                                                                                                                                                                         |

        | 5      | drive_brake                   | set            |           |                                        | This shorts the motor phases, which slows the motor down by dissipating energy in the motor.                                                                                                                                                                                                                                                                                                                |

        | 6      | drive_coast                   | set            |           |                                        | This disables all drive circuitry, which causes the motor to coast passively.                                                                                                                                                                                                                                                                                                                               |

        | 7      | drive_angle_offset            | get            | float     | :math:`\text{rad}`                     | This is analogous to motor timing. This is internally computed by the motor.                                                                                                                                                                                                                                                                                                                                |

        | 8      | drive_pwm                     | get            | float     | :math:`\text{PWM}`                     | This is the applied PWM after all computation and limiting [-1, 1].                                                                                                                                                                                                                                                                                                                                         |

        | 9      | drive_volts                   | get            | float     | :math:`\text{V}`                       | This is the applied PWM after all computation and limiting.                                                                                                                                                                                                                                                                                                                                                 |

        | 10     | mech_lead_angle               | get            | float     | :math:`\text{rad}`                     | This is the lag compensation used.                                                                                                                                                                                                                                                                                                                                                                          |

        | 11     | obs_supply_volts              | get            | float     | :math:`\text{V}`                       | This is the observed supply voltage.                                                                                                                                                                                                                                                                                                                                                                        |

        | 12     | obs_angle                     | get            | float     | :math:`\text{rad}`                     | This is the observed motor angle.                                                                                                                                                                                                                                                                                                                                                                           |

        | 13     | obs_velocity                  | get            | float     | :math:`\frac{\text{rad}}{\text{s}}`    | This is the observed motor velocity.                                                                                                                                                                                                                                                                                                                                                                        |

        | 14     | motor_pole_pairs              | get, set, save | uint16    | :math:`\text{PP}`                      | This is the number of motor pole pairs (magnets/2).                                                                                                                                                                                                                                                                                                                                                         |

        | 15     | motor_emf_shape               | get, set, save | uint8     |                                        | The default setting is sinusoidal EMF. Some firmwares have trapezoidal or custom shapes.                                                                                                                                                                                                                                                                                                                    |

        | 16     | permute_wires                 | get, set, save | uint8     | :math:`\text{bool}`                    | This is factory set. Do not change.                                                                                                                                                                                                                                                                                                                                                                         |

        | 17     | calibration_angle             | get, set, save | float     | :math:`\text{rad}`                     | This is factory set. Do not change.                                                                                                                                                                                                                                                                                                                                                                         |

        | 18     | lead_time                     | get, set, save | float     | :math:`s`                              | This is factory set. Do not change.                                                                                                                                                                                                                                                                                                                                                                         |

        | 19     | commutation_hz                | get, set, save | uint32    | :math:`Hz`                             | This is the frequency of commutation. Higher frequencies run faster and more efficiently, but may not give the controller enough computation time.                                                                                                                                                                                                                                                          |

        | 20     | phase_angle                   | get, set       | float     | :math:`\text{rad}`                     | This is the angle used for open loop (gimbal) mode and is used with drive_phase_pwm or drive_phase_volts.                                                                                                                                                                                                                                                                                                   |

        | 21     | drive_volts_addition          | get, set       | float     | :math:`\text{V}`                       | This is the amount of voltage applied for anticogging or buzzing.                                                                                                                                                                                                                                                                                                                                           |

        | 22     | angle_adjust_enable           | get, set, save | uint8     | :math:`\text{bool}`                    | This setting enables closed loop timing angle adjustment.                                                                                                                                                                                                                                                                                                                                                   |

        | 23     | motor_emf_calc                | get            | float     | :math:`\text{V}`                       | This is the computed emf from closed loop angle calculation.                                                                                                                                                                                                                                                                                                                                                |

        | 24     | angle_adjustment              | get            | float     | :math:`\text{rad}`                     | This is the angle adjustment from closed loop calculation.                                                                                                                                                                                                                                                                                                                                                  |

        | 25     | angle_adjust_max              | get, set, save | float     | :math:`\text{rad}`                     | This is the maximum angle the closed loop calculation is allowed to adjust.                                                                                                                                                                                                                                                                                                                                 |
        +--------+-------------------------------+----------------+-----------+----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 26     | angle_adjust_kp               | get, set, save | float     |                                        | This is the proportional gain for angle adjustment.                                                                                                                                                                                                                                                                                                                                                         |
        +--------+-------------------------------+----------------+-----------+----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 27     | angle_adjust_ki               | get, set, save | float     |                                        | This is the integral gain for angle adjustment.                                                                                                                                                                                                                                                                                                                                                             |

        | 32     | motor_Kv                      | get, set, save | float     | :math:`\frac{\text{RPM}}{V}`           | This is the motor's voltage constant.                                                                                                                                                                                                                                                                                                                                                                       |

        | 33     | motor_R_ohm                   | get, set, save | float     | :math:`\text{ohm}`                     | This is the motor's resistance.                                                                                                                                                                                                                                                                                                                                                                             |

        | 34     | motor_I_max                   | get, set, save | float     | :math:`A`                              | This is the max allowable motor current.                                                                                                                                                                                                                                                                                                                                                                    |

        | 35     | volts_limit                   | get, set, save | float     | :math:`V`                              | This is the max regen voltage.                                                                                                                                                                                                                                                                                                                                                                              |

        | 36     | est_motor_amps                | get            | float     | :math:`A`                              | This is the estimated motor amps.                                                                                                                                                                                                                                                                                                                                                                           |

        | 37     | est_motor_torque              | get            | float     | :math:`N * m`                          | This is the estimated motor torque.                                                                                                                                                                                                                                                                                                                                                                         |

        | 38     | motor_redline_start           | get, set, save | float     | :math:`\frac{\text{rad}}{s}`           | This is the speed at which motor begins to derate.                                                                                                                                                                                                                                                                                                                                                          |

        | 39     | motor_redline_end             | get, set, save | float     | :math:`\frac{\text{rad}}{s}`           | This is the speed at which the motor is fully derated.                                                                                                                                                                                                                                                                                                                                                      |

        | 40     | motor_l                       | get, set, save | float     | :math:`H`                              | This is the cross inductance.                                                                                                                                                                                                                                                                                                                                                                               |

        | 41     | derate                        | get            | int32     | :math:`PU_{fix16}`                     | This is the amount of derating. No derate = 65536, full derate = 0.                                                                                                                                                                                                                                                                                                                                         |

        | 42     | motor_i_soft_start            | get, set, save | float     | :math:`A`                              | This is the current at which motor begins to derate.                                                                                                                                                                                                                                                                                                                                                        |

        | 43     | motor_i_soft_end              | get, set, save | float     | :math:`A`                              | This is the current at which the motor is fully derated.                                                                                                                                                                                                                                                                                                                                                    |

        | 44     | emf                           | get            | float     | :math:`\text{V}`                       | This reports the estimated back-EMF voltage produced by the motor based on its velocity.                                                                                                                                                                                                                                                                                                                    |

        | 45     | volts_at_max_amps             | get            | float     | :math:`\text{V}`                       | This is the drive voltage that is expected to be applied at the motor's maximum safe current based on motor resistance. This is used to limit the maximum current applied to the motor. This returns a model based voltage that is based on the maximum allowed motor amps.                                                                                                                                 |

        | 46     | slew_volts_per_second         | get, set, save | float     | :math:`\frac{V}{s}`                    | This is the maximum allowed rate of change for the drive voltage when the slew rate is enabled. E.g. If this is 100, Then the drive voltage of the motor cannot change faster than 100 V/s.                                                                                                                                                                                                                 |

        | 47     | slew_enable                   | get, set, save | float     | :math:`\text{V}`                       | This enables a voltage slew rate on the motor's drive voltage.                                                                                                                                                                                                                                                                                                                                              |

        | 48     | motoring_supply_current_limit | get, set, save | float     | :math:`A`                              | On modules that support dynamic supply current limiting, this entry determines the current limit for the current from the supply when the module is "motoring", i.e. the drive voltage is greater than the back-EMF, as opposed to when it is regenerating. Note this is the current from the supply, so it would be the current from your battery or power supply.                                         |

        | 49     | regen_supply_current_limit    | get, set, save | float     | :math:`A`                              | On modules that support dynamic supply current limiting, this entry determines the current limit for the current back to the supply when the module is regenerating, i.e. the back-EMF is greater than the drive voltage, as opposed to when it is motoring. Note this is the current from the supply, so it would be the current from your battery or power supply.                                        |

        | 50     | supply_current_limit_enable   | get, set, save | uint8     | :math:`\text{bool}`                    | This enables or disables dynamic supply current limiting. Limiting is enabled when true, and disabled when false.                                                                                                                                                                                                                                                                                           |

        | 51     | regen_limiting                | get            | uint8     | :math:`\text{bool}`                    | When dynamic supply current limiting is enabled, this reports whether the drive voltage is currently being limited due to the regeneration current back through the supply. True means that the limiter is currently controlling the drive voltage because the regeneration supply current is at or above the limit, false means the regeneration current is low enough that the limiter has not activated. |

        | 52     | regen_limit_adjust            | get            | float     | :math:`\text{V}`                       | This reports the adjustment voltage being applied to the dynamic supply current limited volts by the closed loop controller due to the regeneration limit. The adjustment adapts to improve the accuracy of the supply current limiting.                                                                                                                                                                    |
        +--------+-------------------------------+----------------+-----------+----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 53     | motoring_limiting             | get            | uint8     | :math:`\text{bool}`                    | When dynamic supply current limiting is enabled, this reports whether the drive voltage is currently being limited due to the motoring supply current. True means that the limiter is currently controlling the drive voltage because the supply current is at or above the limit, false means the supply current is low enough that the limiter has not activated.                                         |

        | 54     | motoring_limit_adjust         | get            | float     | :math:`\text{V}`                       | This reports the adjustment voltage being applied to the dynamic supply current limited volts by the closed loop controller due to the motoring limit. The adjustment adapts to improve the accuracy of the supply current limiting.                                                                                                                                                                        |
        +--------+-------------------------------+----------------+-----------+----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 55     | regen_limit_kp                | get, set, save | float     | :math:`\frac{V}{A}`                    | This is the P gain for the closed loop controller of the regeneration dynamic supply current limiter.                                                                                                                                                                                                                                                                                                       |

        | 56     | regen_limit_ki                | get, set, save | float     | :math:`\frac{V*s}{A}`                  | This is the I gain for the closed loop controller of the regeneration dynamic supply current limiter.                                                                                                                                                                                                                                                                                                       |

        | 57     | regen_limit_max               | get, set, save | float     | :math:`\text{V}`                       | This is the maximum amount of drive voltage adjustment that the closed loop portion of the regeneration dynamic supply current limiter will apply to the calculated voltage limit.                                                                                                                                                                                                                          |

        | 58     | motoring_limit_kp             | get, set, save | float     | :math:`\frac{V}{A}`                    | This is the P gain for the closed loop controller of the motoring dynamic supply current limiter.                                                                                                                                                                                                                                                                                                           |

        | 59     | motoring_limit_ki             | get, set, save | float     | :math:`\frac{V*s}{A}`                  | This is the I gain for the closed loop controller of the motoring dynamic supply current limiter.                                                                                                                                                                                                                                                                                                           |

        | 60     | motoring_limit_max            | get, set, save | float     | :math:`\text{V}`                       | This is the maximum amount of drive voltage adjustment the closed loop portion of the motoring dynamic supply current limiter will apply to the calculated voltage limit.                                                                                                                                                                                                                                   |


Type ID 52 | Propeller Motor Controller
=================================================
    .. table:: Propeller Motor Controller
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | Sub ID | Short Name          | Access         | Data Type | Unit                                       | .. centered:: Note                                                                          |
        +========+=====================+================+===========+============================================+=============================================================================================+
        | 0      | ctrl_mode           | get            | int8      | :math:`\text{Enum}`                        | -1 = no change, 0 = brake, 1 = coast, 2 = pwm, 3 = volts, 4 = velocity, 5 = thrust          |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 1      | ctrl_brake          | set            |           |                                            | Shorts motor leads, slows motor down dissipating energy in motor                            |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 2      | ctrl_coast          | set            |           |                                            | Disables all drive circuitry                                                                |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 3      | ctrl_pwm            | get, set       | float     | :math:`\text{PWM}`                         | [-1, 1] fraction of input voltage                                                           |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 4      | ctrl_volts          | get, set       | float     | :math:`V`                                  | [-supply, supply] Voltage to apply to motor                                                 |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 5      | ctrl_velocity       | get, set       | float     | :math:`\frac{\text{rad}}{s}`               | Angular velocity command                                                                    |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 6      | ctrl_thrust         | get, set       | float     | :math:`N`                                  | Thrust command (requires kt values)                                                         |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 7      | velocity_kp         | get, set, save | float     | :math:`\frac{V}{(\frac{\text{rad}}{s})}`   | Proportional gain                                                                           |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 8      | velocity_ki         | get, set, save | float     | :math:`\frac{V}{\text{rad}}`               | Integral gain                                                                               |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 9      | velocity_kd         | get, set, save | float     | :math:`\frac{V}{(\frac{\text{rad}}{s^2})}` | Derivative gain                                                                             |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 10     | velocity_ff0        | get, set, save | float     | :math:`V`                                  | Feed forward 0th order term                                                                 |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 11     | velocity_ff1        | get, set, save | float     | :math:`\frac{V}{(\frac{\text{rad}}{s})}`   | Feed forward 1st order term                                                                 |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 12     | velocity_ff2        | get, set, save | float     | :math:`\frac{V}{(\frac{\text{rad}}{s})^2}` | Feed forward 2nd order term                                                                 |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 13     | propeller_kt_pos    | get, set, save | float     | :math:`\frac{N}{(\frac{\text{rad}}{s})^2}` | T = ktω2thrust constant in positive direction                                               |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 14     | propeller_kt_neg    | get, set, save | float     | :math:`\frac{N}{(\frac{\text{rad}}{s})^2}` | T = ktω2 thrust constant in negative direction                                              |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 15     | timeout             | get, set, save | float     | :math:`s`                                  | The controller must receive a message within thistime otherwise it is set to coast mode     |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 16     | input_filter_fc     | get, set, save | uint32    | :math:`\text{Hz}`                          | Low pass cutoff frequency for input commands                                                |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 17     | timeout_meaning     | get, set, save | uint8     | :math:`\text{Enum}`                        | This indicates if a timeout is intended to be used as an intentional disarm or as an error. |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 18     | timeout_behavior    | get, set, save | uint8     | :math:`\text{Enum}`                        | This detemines what behavior to perform when a timeout error occurs.                        |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+
        | 19     | timeout_song_option | get, set, save | uint8     | :math:`\text{Enum}`                        | This determines how many times the timeout song will play on a timeout error.               |
        +--------+---------------------+----------------+-----------+--------------------------------------------+---------------------------------------------------------------------------------------------+

Type ID 58 | Step Direction Input
=================================================
    .. table:: Step Direction Input
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------+----------------+-----------+---------------------+--------------------------+
        | Sub ID | Short Name |     Access     | Data Type | Unit                |           Note           |
        +========+============+================+===========+=====================+==========================+
        | 0      | angle      | get, set       | float     | :math:`\text{rad}`  | Current commanded angle  |
        +--------+------------+----------------+-----------+---------------------+--------------------------+
        | 1      | angle_step | get, set, save | float     | :math:`\text{rad}`  | Angle step per step edge |
        +--------+------------+----------------+-----------+---------------------+--------------------------+

Type ID 59 | Multi-turn Angle Controller
=================================================
	.. table:: Multi-turn Angle Controller
		:widths: 8 18 15 10 5 60
		:class: tight-table

		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| Sub ID | Short Name                      | Access         | Data Type | Unit                                      | Note                                                                                                                                                                                                                                                                                                                                               |
		+========+=================================+================+===========+===========================================+====================================================================================================================================================================================================================================================================================================================================================+
		| 0      | ctrl_mode                       | get            | int8      | :math:`\text{Enum}`                       | no_change = -1, brake=0, coast=1, pwm=2, volts=3, velocity=4, angle=5, trajectory=6                                                                                                                                                                                                                                                                |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 1      | ctrl_brake                      | set            |           |                                           | Shorts motor phases, slows motor down dissipating energy in motor.                                                                                                                                                                                                                                                                                 |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 2      | ctrl_coast                      | set            |           |                                           | Disables all drive circuitry, motor passively coasts.                                                                                                                                                                                                                                                                                              |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 3      | ctrl_angle                      | get, set       | float     | :math:`\text{rad}`                        | Angular location command                                                                                                                                                                                                                                                                                                                           |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 4      | ctrl_velocity                   | get, set       | float     | :math:`\frac{\text{rad}}{s}`              | Angular velocity command                                                                                                                                                                                                                                                                                                                           |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 5      | angle_Kp                        | get, set, save | float     | :math:`\frac{V}{\text{rad}}`              | Proportional gain                                                                                                                                                                                                                                                                                                                                  |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 6      | angle_Ki                        | get, set, save | float     | :math:`\frac{V}{\text{rad}*s}`            | Integral gain                                                                                                                                                                                                                                                                                                                                      |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 7      | angle_Kd                        | get, set, save | float     | :math:`\frac{V}{(\frac{\text{rad}}{s})}`  | Derivative gain                                                                                                                                                                                                                                                                                                                                    |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 8      | timeout                         | get, set, save | float     | :math:`s`                                 | The controller must receive a message within this time otherwise it is set to coast mode.                                                                                                                                                                                                                                                          |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 9      | ctrl_pwm                        | get, set       | float     | :math:`\text{PWM}`                        | Spins motor with this throttle [-1, 1].                                                                                                                                                                                                                                                                                                            |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 10     | ctrl_volts                      | get, set       | float     | :math:`V`                                 | Spins motor with this voltage.                                                                                                                                                                                                                                                                                                                     |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 11     | obs_angular_displacement        | get, set       | float     | :math:`\text{rad}`                        | This represents the total distance that the module has spun measured in radians. Unless this value is set explicitly, it represents the distance, positive or negative, that the module has spun away from zero_angle. If this value is set, all future displacement controls and readings will be measured in reference to the set displacement.  |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 12     | obs_angular_velocity            | get            | float     | :math:`\frac{\text{rad}}{s}`              | Observed angular velocity                                                                                                                                                                                                                                                                                                                          |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 13     | meter_per_rad                   | get, set, save | float     | :math:`\frac{m}{\text{rad}}`              | Transmission between angular and linear motion                                                                                                                                                                                                                                                                                                     |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 14     | ctrl_linear_displacement        | get, set,      | float     | :math:`m`                                 | Linear equivalent to ctrl_angle                                                                                                                                                                                                                                                                                                                    |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 15     | ctrl_linear_velocity            | get, set,      | float     | :math:`\frac{m}{s}`                       | Linear equivalent to ctrl_velocity                                                                                                                                                                                                                                                                                                                 |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 16     | obs_linear_displacement         | get, set,      | float     | :math:`m`                                 | Observed linear location                                                                                                                                                                                                                                                                                                                           |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 17     | obs_linear_velocity             | get            | float     | :math:`\frac{m}{s}`                       | Observed linear velocity                                                                                                                                                                                                                                                                                                                           |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 18     | angular_speed_max               | get, set, save | float     | :math:`\frac{\text{rad}}{s}`              | The controller will never attempt to exceed this speed.                                                                                                                                                                                                                                                                                            |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 19     | trajectory_angular_displacement | get, set       | float     | :math:`\text{rad}`                        | Final absolute displacement of trajectory.                                                                                                                                                                                                                                                                                                         |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 20     | trajectory_angular_velocity     | get, set       | float     | :math:`\frac{\text{rad}}{s}`              | Final velocity of the trajectory. Defaults to 0.                                                                                                                                                                                                                                                                                                   |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 21     | trajectory_angular_acceleration | get, set       | float     | :math:`\frac{\text{rad}}{s^2}`            | Final acceleration of the trajectory. Defaults to 0.                                                                                                                                                                                                                                                                                               |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 22     | trajectory_duration             | set            | float     | :math:`s`                                 | Duration of trajectory. Trajectory is executed or queued once this is sent.                                                                                                                                                                                                                                                                        |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 23     | trajectory_linear_displacement  | get, set       | float     | :math:`m`                                 | Final absolute displacement of trajectory.                                                                                                                                                                                                                                                                                                         |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 24     | trajectory_linear_velocity      | get, set       | float     | :math:`\frac{m}{s}`                       | Final velocity of the trajectory. Defaults to 0.                                                                                                                                                                                                                                                                                                   |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 25     | trajectory_linear_acceleration  | get, set       | float     | :math:`\frac{m}{s^2}`                     | Final acceleration of the trajectory. Defaults to 0.                                                                                                                                                                                                                                                                                               |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 26     | trajectory_average_speed        | get, set       | float     | :math:`\frac{\text{rad}}{s}`              | Average speed of a trajectory. Trajectory is executed or queued once this is sent. Must be >0.                                                                                                                                                                                                                                                     |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 27     | trajectory_queue_mode           | get, set, save | int8      | :math:`\text{Enum}`                       | append=0, overwrite=1                                                                                                                                                                                                                                                                                                                              |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 29     | ff                              | get, set       | uint32    | :math:`V_{fix16}`                         | Feed forward term                                                                                                                                                                                                                                                                                                                                  |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 30     | sample_zero_angle               | set            |           |                                           | Sets the module’s current postiion as the zero angle.                                                                                                                                                                                                                                                                                              |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
		| 31     | zero_angle                      | get, set, save | float     | :math:`\text{rad}`                        | The encoder position the module considers to be 0 radians. Since this is an encoder position, zero_angle is constrained to [-pi, pi]. Unless obs_angular_displacement is set explicitly, this is the position regarded as 0 radians, and all displacements are measured in comparison to this point.                                               |
		+--------+---------------------------------+----------------+-----------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 60 | ESC Propeller Input Parser
=================================================
    .. table:: ESC Propeller Input Parser
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name          | Access         | Data Type | Unit                        | Note                                                                                                                                      |
        +========+=====================+================+===========+=============================+===========================================================================================================================================+
        | 0      | mode                | get, set, save | uint8     | :math:`\text{Enum}`         | 0 = PWM, 1 = Voltage, 2 = Velocity, 3 = Thrust                                                                                            |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | raw_value           | get, set       | float     | :math:`\text{PU}`           | Input value [0, 1]                                                                                                                        |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | sign                | get, set, save | uint8     | :math:`\text{Enum}`         | 0 = unconfigured, 1 = signed positive, 2 = signed negative, 3 = unsigned positive, 4 = unsigned negative                                  |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | volts_max           | get, set, save | float     | :math:`V`                   | Maximum voltage to apply to motor, raw_value scaled to [-volts_max, volts_max] or [0, volts_max]                                          |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | velocity_max        | get, set, save | float     | :math:`\frac{\text{rad}}{s}`| Maximum angular velocity command, raw_value scaled to [-velocity_max, velocity_max] or [0, velocity_max]                                  |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | thrust_max          | get, set, save | float     | :math:`N`                   | Maximum thrust command (requires kt values), raw_value scaled to [-thrust_max, thrust_max] or [0, thrust_max]                             |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | safe_factor         | get, set, save | float     | :math:`\text{PU}`           | Setting the Save Factor between 0.0 and 1.0 will scale down the values coming from the FC. Default value is 1.0                           |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | flip_negative       | get, set, save | uint8     | :math:`\text{Bool}`         | Allows the FC and ESC to agree on the meaning of signals coming out of ESC                                                                |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 9      | zero_spin_throttle  | get, set, save | float     | :math:`\text{PU}`           | The throttle percentage defines what throttle command percentage the :ref:`zero spin throttle regions<zero_spin_throttle_regions>` begin. |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
        | 10     | zero_spin_tolerance | get, set, save | float     | :math:`\text{PU}`           | Defines how far below the Zero Spin Throttle Percentage the zero spin throttle region will extend for positive throttle commands.         |
        +--------+---------------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 61 | Buzzer Control
=================================================
    .. table:: Buzzer Control
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | Sub ID | Short Name | Access         | Data Type | Unit                        | Note                                                              |
        +========+============+================+===========+=============================+===================================================================+
        | 0      | ctrl_mode  | get            | int8      | :math:`\text{Enum}`         | no_change = -1, brake=0, coast=1, note=2, song=3                  |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 1      | ctrl_brake | set            |           |                             | Shorts motor phases, slows motor down dissipating energy in motor |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 2      | ctrl_coast | set            |           |                             | Disables all drive circuitry, motor passively coasts              |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 3      | ctrl_note  | set            |           |                             | Must have sent a 'hz' and 'volume' first                          |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 4      | volume_max | get, set, save | float     | :math:`V`                   | Uses this voltage command for maximum volume                      |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 5      | hz         | get, set       | uint16    | :math:`\text{Hz}`           | Frequency of the note                                             |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 6      | volume     | get, set       | uint8     | :math:`[0, 127]`            | Individual note volume as fraction of 127                         |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+
        | 7      | duration   | get, set       | uint16    | :math:`ms`                  | Note length. Assumed max (65535 ms) if not sent.                  |
        +--------+------------+----------------+-----------+-----------------------------+-------------------------------------------------------------------+

Type ID 69 | Power Monitor
=================================================
    .. table:: Power Monitor
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | Sub ID | Short Name   | Access         | Data Type | Unit                  | Note                                          |
        +========+==============+================+===========+=======================+===============================================+
        | 0      | volts        | get            | float     | :math:`V`             | Input voltage to module                       |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 1      | amps         | get            | float     | :math:`A`             | Input amperage to module                      |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 2      | watts        | get            | float     | :math:`W`             | Input wattage to module                       |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 3      | joules       | get            | float     | :math:`J`             | Total energy consumed by module               |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 4      | reset_joules | set            |           |                       | Sets joules to zero                           |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 5      | filter_fs    | get            | uint32    | :math:`\text{Hz}`     | Low pass filter sample frequency              |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 6      | filter_fc    | get, set, save | uint32    | :math:`\text{Hz}`     | Low pass filter cutoff frequency              |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 7      | volts_raw    | get            | uint16    | :math:`\text{bit}`    | ADC value for the voltage measurement         |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 8      | amps_raw     | get            | uint16    | :math:`\text{bit}`    | ADC value for the current measurement         |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 9      | volts_gain   | get, set, save | float     | :math:`\frac{V}{bit}` | Gain for the ADC to voltage conversion        |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 10     | amps_gain    | get, set, save | float     | :math:`\frac{A}{bit}` | Gain for the ADC to current conversion        |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+
        | 11     | amps_bias    | get, set, save | float     | :math:`\text{bit}`    | Offset bias for the ADC to current conversion |
        +--------+--------------+----------------+-----------+-----------------------+-----------------------------------------------+

Type ID 71 | Anticogging
=================================================
    .. table:: Anticogging
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+
        | Sub ID |  Short Name   |     Access     | Data Type |      Unit                    |                                                   Note                                                    |
        +========+===============+================+===========+==============================+===========================================================================================================+
        | 0      | table_size    | get            | uint16    |                              | Size of the anticogging table                                                                             |
        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+
        | 1      | is_data_valid | get            | uint8     | :math:`\text{bool}`          | Indicates if the cog information is valid.  is_enabled must be called first to check the cog information. |
        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+
        | 2      | is_enabled    | get, set, save | uint8     | :math:`\text{bool}`          | Indicates if anticogging is running.  This will stay 0/false if the is_data_valid field is 0/false.       |
        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+
        | 3      | erase         | set            |           |                              | Erases the cog information.  This is not recommended.                                                     |
        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+
        | 4      | left_shift    | get, set, save | uint8     | :math:`* 2^x`                | Anticog multiplier.  Modification is not recommended.                                                     |
        +--------+---------------+----------------+-----------+------------------------------+-----------------------------------------------------------------------------------------------------------+

Type ID 73 | Temperature Monitor Microcontroller
=================================================
    .. table:: Temperature Monitor Microcontroller
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name |     Access     | Data Type | Unit              |                                                     Note                                                     |
        +========+============+================+===========+===================+==============================================================================================================+
        | 0      | uc_temp    | get            | float     | :math:`^{\circ}C` | Temperature of the microcontroller                                                                           |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | 1      | filter_fs  | get            | uint32    | :math:`\text{Hz}` | Low pass filter sample frequency                                                                             |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | 2      | filter_fc  | get, set, save | uint32    | :math:`\text{Hz}` | Low pass filter cutoff frequency                                                                             |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | 3      | otw        | get, set, save | float     | :math:`^{\circ}C` | Over temperature warning. Derating of the motor begins at this temperature.                                  |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | 4      | otlo       | get, set, save | float     | :math:`^{\circ}C` | Over temperature lock out. Derating of the motor end at this temperature, where the motor is fully disabled. |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+
        | 5      | derate     | get            | float     | :math:`\text{PU}` | Amount of derating applied to motor [0 1]                                                                    |
        +--------+------------+----------------+-----------+-------------------+--------------------------------------------------------------------------------------------------------------+

Type ID 74 | Voltage Superposition
=================================================
    .. table:: Voltage Superposition
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name                    | Access         | Data Type | Unit                                           | Note                                                                                                                                                                                     |
        +========+===============================+================+===========+================================================+==========================================================================================================================================================================================+
        | 0      | zero_angle                    | get, set, save | float     | :math:`\text{rad}`                             | This is the angular position that the module considers as its 'zero' position to start pulsing.                                                                                          |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | frequency                     | get, set, save | uint8     | :math:`\frac{\text{Pulses}}{\text{Rotation}}`  | This is the number of pulses that happen per rotation.                                                                                                                                   |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | phase                         | get, set       | float     | :math:`\text{rad}`                             | This value is added to the zero angle to set where the pulse occurs.                                                                                                                     |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | amplitude                     | get, set       | float     | :math:`V`                                      | This value represents the strength of the pulse. Setting the amplitude too high at lower speeds can cause the pulsing to overcome the inertia of the motor spinning, causing it to stop. |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | voltage                       | get            | float     | :math:`V`                                      | This is the voltage that is currently being applied by the pulsing client.                                                                                                               |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | max_allowed_amplitude         | get            | float     | :math:`V`                                      | This is the maximum pulsing amplitude based on settings and velocity.                                                                                                                    |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | velocity_cutoff               | get, set, save | float     | :math:`\frac{\text{rad}}{s}`                   | This is the velocity at which pulsing is allowed. Any velocity between cutoff and \-cutoff will not pulse.                                                                               |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | poly_coeff_zero               | get, set, save | float     | :math:`V`                                      | This is the zeroth coefficient of the cutoff polynomial.                                                                                                                                 |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | poly_coeff_one                | get, set, save | float     | :math:`V * (\frac{s}{\text{rad}})`             | This is the first coefficient of the cutoff polynomial.                                                                                                                                  |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 9      | poly_coeff_two                | get, set, save | float     | :math:`V * (\frac{s}{\text{rad}})^2`           | This is the second coefficient of the cutoff polynomial.                                                                                                                                 |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 10     | poly_coeff_three              | get, set, save | float     | :math:`V * (\frac{s}{\text{rad}})^3`           | This is the third coefficient of the cutoff polynomial.                                                                                                                                  |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 11     | phase_lead_time               | get, set, save | float     | :math:`s`                                      | This is the phase lead time setting for tuning pulsing propellers.                                                                                                                       |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 12     | phase_lead_angle              | get            | float     | :math:`rad`                                    | This is the instantaneous phase lead angle determined by the phase lead time.                                                                                                            |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 13     | phase_act                     | get            | float     | :math:`rad`                                    | This is the instantaneous phase being used by the pulsing client.                                                                                                                        |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 14     | amplitude_act                 | get            | float     | :math:`V`                                      | This is the instantaneous amplitude being used by the pulsing client.                                                                                                                    |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 15     | sample_mechanical_zero        | set            |           |                                                | This sets the zero_angle to the current motor position.                                                                                                                                  |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 16     | propeller_torque_offset_angle | get, set, save | float     | :math:`rad`                                    | This offsets where the pulse starts around the motor to allow for propeller mechanical properties.                                                                                       |
        +--------+-------------------------------+----------------+-----------+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        
Type ID 76 | Hobby Input
=================================================
    .. table:: Hobby Input
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name               | Access         | Data Type | Unit                        | Note                                                                                                                                                                                                      |
        +========+==========================+================+===========+=============================+===========================================================================================================================================================================================================+
        | 0      | allowed_protocols        | get, set, save | uint8     | :math:`\text{Enum}`         | Standard PWM = 1, OneShot125 = 2, OneShot42 = 3, MultiShot = 4                                                                                                                                            |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | protocol                 | get, set       | uint8     | :math:`\text{Enum}`         | Standard PWM = 1, OneShot125 = 2, OneShot42 = 3, MultiShot = 4. The currently active protocol for hobby input. Should not generally need to be set by users, sending hobby input sets this automatically. |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | calibrated protocol      | get            | uint8     | :math:`\text{Enum}`         | Standard PWM = 1, OneShot125 = 2, OneShot42 = 3, MultiShot = 4. The analog hobby protocol that the module was most recently calibrated with.                                                              |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | calibrated_high_ticks_us | get, set, save | uint8     | :math:`\mu s`               | The number of microseconds of the calibrated protocol considered to be a 100% throttle command.                                                                                                           |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | calibrated_low_ticks_us  | get, set, save | uint8     | :math:`\mu s`               | The number of microseconds of the calibrated protocol considered to be a 0% throttle command.                                                                                                             |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | reset_calibration        | set            |           |                             | Clears calibration data                                                                                                                                                                                   |
        +--------+--------------------------+----------------+-----------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 77 | Temperature Estimator
=================================================
    .. table:: Temperature Estimator
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | Sub ID |     Short Name      |     Access     | Data Type | Unit                 |                                                     Note                                                     |
        +========+=====================+================+===========+======================+==============================================================================================================+
        | 0      | temp                | get            | float     | :math:`^{\circ}C`    | Temperature of the motor coils                                                                               |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | 1      | otw                 | get, set, save | float     | :math:`^{\circ}C`    | Over temperature warning. Derating of the motor begins at this temperature.                                  |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | 2      | otlo                | get, set, save | float     | :math:`^{\circ}C`    | Over temperature lock out. Derating of the motor end at this temperature, where the motor is fully disabled. |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | 3      | thermal_resistance  | get, set, save | float     | :math:`\frac{K}{W}`  | Model thermal resistance                                                                                     |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | 4      | thermal_capacitance | get, set, save | float     | :math:`\frac{J}{K}`  | Model thermal capacitance                                                                                    |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+
        | 5      | derate              | get            | Fix16     | :math:`\text{PU}`    | Amount of derating applied to motor [0 65536] where 65536 is normal operation                                |
        +--------+---------------------+----------------+-----------+----------------------+--------------------------------------------------------------------------------------------------------------+

Type ID 78 | Servo Input Parser
=================================================
    .. table:: Servo Input Parser
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------+----------------+-----------+----------------------+--------------------------------------------------+
        | Sub ID | Short Name |     Access     | Data Type |  Unit                |                       Note                       |
        +========+============+================+===========+======================+==================================================+
        | 0      | mode       | get, set, save | uint8     | :math:`\text{Enum}`  | 0 = PWM, 1 = Voltage, 2 = Velocity, 3 = Position |
        +--------+------------+----------------+-----------+----------------------+--------------------------------------------------+
        | 1      | unit_min   | get, set, save | float     | :math:`\text{(mode)}`| Minimum value.  Unit determined by mode.         |
        +--------+------------+----------------+-----------+----------------------+--------------------------------------------------+
        | 2      | unit_max   | get, set, save | float     | :math:`\text{(mode)}`| Maximum value.  Unit determined by mode.         |
        +--------+------------+----------------+-----------+----------------------+--------------------------------------------------+

Type ID 80 | UAVCAN Node
=================================================
    .. table:: UAVCAN Node
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name             | Access         | Data Type | Unit                            | Note                                                                                                                                                                                                                                                                                                                                   |
        +========+========================+================+===========+=================================+========================================================================================================================================================================================================================================================================================================================================+
        | 0      | uavcan_node_id         | get, set, save | uint32    | :math:`\text{ID [1, 127]}`      | This ID is used by the module to uniquely identify itself on the DroneCAN bus. The module must be power cycled in order for a new ID to take effect. Each module on the bus must have a unique ID. While the IDs can be a number between 1 and 127, it is recommended to avoid using 1 as this is commonly used by flight controllers. |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | uavcan_esc_index       | get, set, save | uint32    | :math:`\text{Index [0, 19]}`    | This is used to identify the module when ESC commands are sent on the DroneCAN bus. Each ESC/module on the bus requires a unique index to identify which commands are intended for it. The ESC indexes range from 0 to 19, with the first module starting at index 0.                                                                  |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | zero_behavior          | get, set, save | uint32    | :math:`\text{Enum}`             | This determines how the module reacts to receiving a zero setpoint from a DroneCAN Raw Command when DroneCAN is bypassing arming. 0 \= coast, 1 \= Brake, 2 \= Normal Controller                                                                                                                                                       |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | last_error_code        | get            | uint8     | :math:`\text{Error Code}`       | This represents the error code of the last CAN failure. 0 means no error.                                                                                                                                                                                                                                                              |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | receive_error_counter  | get            | uint8     | :math:`\text{Number of errors}` | This counter increments with each CAN receive error.                                                                                                                                                                                                                                                                                   |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | transmit_error_counter | get            | uint8     | :math:`\text{Number of errors}` | This counter increments with each CAN transmit error.                                                                                                                                                                                                                                                                                  |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | bus_off_flag           | get            | uint8     | :math:`\text{Bool}`             | This flag indicates if the bus turned itself off due to errors. 1 means the bus is off.                                                                                                                                                                                                                                                |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | error_passive_flag     | get            | uint8     | :math:`\text{Bool}`             | This flag indicates if the error limit to enter passive mode has been reached. 1 means the module is past the passiv error limit.                                                                                                                                                                                                      |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | error_warning_flag     | get            | uint8     | :math:`\text{Bool}`             | This flag indicates if the error warning limit has been reached. 1 means there has been enough errors to trigger a warning.                                                                                                                                                                                                            |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 9      | telemetry_frequency    | get, set, save | uint32    | :math:`\text{Hz}`               | This represents the frequency with which telemetry will be sent to the DroneCAN bus.                                                                                                                                                                                                                                                   |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 10     | bit_rate               | get, set, save | uint32    | :math:`\frac{\text{Bit}}{s}`    | This represents the bitrate used by the DroneCAN bus.                                                                                                                                                                                                                                                                                  |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 11     | bypass_arming          | get, set, save | uint8     | :math:`\text{Bool}`             | This setting allows the module to bypass arming with DroneCAN throttle messages. DroneCAN messages will not be impacted by the arming state, will not cause arming state transistions, and will use the zero behavior setting.                                                                                                         |
        +--------+------------------------+----------------+-----------+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 83 | Coil Temperature Estimator
=================================================
    .. table:: Coil Temperature Estimator
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name                   | Access         | Data Type | Unit              | Note                                                                                                                          |
        +========+==============================+================+===========+===================+===============================================================================================================================+
        | 0      | t_coil                       | get            | float     | :math:`^{\circ}C` | This is the estimated temperature of the motor coils.                                                                         |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 1      | t_alu                        | get            | float     | :math:`^{\circ}C` | This is the estimated temperature of the stator aluminum.                                                                     |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 2      | t_amb                        | get, set, save | float     | :math:`^{\circ}C` | This is the estimated temperature of the ambient air, which is usually conservative.                                          |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 3      | h_coil_amb_free_conv         | get, set, save | float     |                   | This is the free convection heat transfer coefficient used when the motor is not spinning.                                    |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 4      | h_coil_stator_cond           | get, set, save | float     |                   | This is the conduction heat transfer coefficient between the coils and the stator aluminum.                                   |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 5      | h_coil_amb_forced_conv       | get            | float     |                   | This is the the present calculated force heat transfer convection coefficient.                                                |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 6      | c_coil                       | get, set, save | float     |                   | This is the thermal heat capacitance/mass of the coils.                                                                       |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 7      | h_coil_amb_forced_conv_coeff | get, set, save | float     |                   | This is the forced convection coefficient calculation coefficient. h_forced_conv = h_conv_coeff * sqrt(speed)                 |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 8      | otw                          | get, set, save | float     | :math:`^{\circ}C` | This is the over temperature warning. The motor begins to derate at this temperature.                                         |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 9      | otlo                         | get, set, save | float     | :math:`^{\circ}C` | This is the over temperature lock out. The derating of the motor ends at this temperature, where the motor is fully disabled. |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 10     | derate                       | get            | float     |                   | This is the amount of derating applied to motor [0, 1] where 1 is normal operation.                                           |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 11     | q_coil_joule                 | get            | float     | :math:`W`         | This is the present heating power in coils.                                                                                   |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 12     | q_coil_amb_conv              | get            | float     | :math:`W`         | This is the present ambient convective cooling power.                                                                         |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+
        | 13     | q_coil_stator_cond           | get            | float     | :math:`W`         | This is the present stator conductive cooling power.                                                                          |
        +--------+------------------------------+----------------+-----------+-------------------+-------------------------------------------------------------------------------------------------------------------------------+

Type ID 84 | Power Safety
=================================================
    .. table:: Power Safety
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name            | Access         | Data Type | Unit                   | Note                                                                                                                                                                                                                                               |
        +========+=======================+================+===========+========================+====================================================================================================================================================================================================================================================+
        | 0      | fault_now             | get            | uint8     | :math:`\text{Bitmask}` | The fault(s) that are currently triggering                                                                                                                                                                                                         |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | fault_ever            | get, set, save | uint8     | :math:`\text{Bitmask}` | Record of all faults that were triggered since last modified by user. The user can clear all of the records by setting the value to 0, or individual faults by properly setting bitmask value                                                      |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | fault_latching        | get, set, save | uint8     | :math:`\text{Bitmask}` | Determines if the motor is latching. When latching, if there are any bits set in fault_ever, motor will stay in Safe Mode until they are cleared. When not latching, motor will enter and exit Safe Mode only on current faults based on fault_now |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | volt_input_low        | get, set, save | float     | :math:`V`              | Minimum threshold value for voltage                                                                                                                                                                                                                |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | volt_input_high       | get, set, save | float     | :math:`V`              | Maximum threshold value for voltage                                                                                                                                                                                                                |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | vref_int_low          | get, set, save | float     | :math:`V`              | Minimum threshold value for reference voltage                                                                                                                                                                                                      |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | vref_int_high         | get, set, save | float     | :math:`V`              | Maximum threshold value for reference voltage                                                                                                                                                                                                      |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | current_input_low     | get, set, save | float     | :math:`A`              | Minimum threshold value for current                                                                                                                                                                                                                |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | current_input_high    | get, set, save | float     | :math:`A`              | Maximum threshold value for current                                                                                                                                                                                                                |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 9      | motor_current_low     | get, set, save | float     | :math:`A`              | Minimum threshold value for motor current                                                                                                                                                                                                          |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 10     | motor_current_high    | get, set, save | float     | :math:`A`              | Maximum threshold value for motor current                                                                                                                                                                                                          |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 11     | temperature_uc_low    | get, set, save | float     | :math:`^{\circ}C`      | Minimum threshold value for microcontroller temperature                                                                                                                                                                                            |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 12     | temperature_uc_high   | get, set, save | float     | :math:`^{\circ}C`      | Maximum threshold value for microcontroller temperature                                                                                                                                                                                            |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 13     | temperature_coil_low  | get, set, save | float     | :math:`^{\circ}C`      | Minimum threshold value for coil temperature                                                                                                                                                                                                       |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 14     | temperature_coil_high | get, set, save | float     | :math:`^{\circ}C`      | Maximum threshold value for coil temperature                                                                                                                                                                                                       |
        +--------+-----------------------+----------------+-----------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 85 | Stow User Interface
=================================================
    .. table:: Stow User Interface
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name          | Access          | Data Type | Unit                                      | Note                                                                                                                                                                                            |
        +========+=====================+=================+===========+===========================================+=================================================================================================================================================================================================+
        | 0      | zero_angle          | get, set, save  | float     | :math:`\text{rad}`                        | The anglular position that the module considers as its 'zero' position.                                                                                                                         |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 1      | target_angle        | get, set, save  | float     | :math:`\text{rad}`                        | The angular postion of the stow postition with reference to the zero angle.                                                                                                                     |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | target_acceleration | get, set, save  | float     | :math:`\frac{\text{rad}}{s^2}`            | The maximum acceleration allowed when moving to the stow position.                                                                                                                              |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | sample_zero         | set             |           |                                           | Sets the module's current postiion as the zero angle.                                                                                                                                           |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | stow                | set             |           |                                           | Setting this triggers the module to stow.                                                                                                                                                       |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | stow_kp             | get, set, save  | float     | :math:`\frac{V}{\text{rad}}`              | The proportional gain to use in the closed loop position controller moving the module to the stow position. A higher gain can lead to a more accurate position, but can also cause oscillation. |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | stow_ki             | get, set, save  | float     | :math:`\frac{V}{\text{rad}*s}`            | The integral gain to use in the closed loop position controller moving the module to the stow position.                                                                                         |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | stow_kd             | get, set, save  | float     | :math:`\frac{V}{(\frac{\text{rad}}{s})}`  | The differential gain to use in the closed loop position controller moving the module to the stow position.                                                                                     |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | hold_stow           | get, set, save  | uint8     |                                           | If True, module will actively hold the stole angle once it is reached. If False, the module will coast.                                                                                         |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        || 9     || stow_status        || get, set, save || uint8    ||                                          || The current state of stowing. See row below for each state:                                                                                                                                    |
        ||       ||                    ||                ||          ||                                          || 0 = Idle: No stowing happening and module is ready for new commands.                                                                                                                           |
        ||       ||                    ||                ||          ||                                          || 1 = In Progress: A move to the stow position is in progress but the module has not reached its stow postition yet.                                                                             |
        ||       ||                    ||                ||          ||                                          || 2 = In Progress: A move to the stow position is in progress but the module has not reached its stow postition yet.                                                                             |
        ||       ||                    ||                ||          ||                                          || 3 = Holding: The module is actively holding its stow postion.                                                                                                                                  |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        || 10    || stow_result        || get, set, save || uint8    ||                                          || The result of how the previous stow attempt ended. See row below for each possible result:                                                                                                     |
        ||       ||                    ||                ||          ||                                          || 0 = No Result: No previous stow attempts. Default result after module reboot.                                                                                                                  |
        ||       ||                    ||                ||          ||                                          || 1 = Completed: The previous stow attempt successfully made it to its stow postion without issue.                                                                                               |
        ||       ||                    ||                ||          ||                                          || 2 = Interrupted: The previous stow attempt was interrupted before compeleting.                                                                                                                 |
        ||       ||                    ||                ||          ||                                          || 3 = Error: An unexpected error occurred during the previous stow attempt.                                                                                                                      |
        +--------+---------------------+-----------------+-----------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


Type ID 86 | Arming Handler
=================================================
    .. table:: Arming Handler
        :widths: 8 18 15 10 5 100
        :class: tight-table

        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name                          | Access          | Data Type | Unit                     | Note                                                                                                                                                                                                                                                 |
        +========+=====================================+=================+===========+==========================+======================================================================================================================================================================================================================================================+
        | 1      | always_armed                        | get, set, save  | uint8     |                          | If True, handler will automatically arm when the first throttle message is received.                                                                                                                                                                 |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 2      | arm_on_throttle                     | get, set, save  | uint8     |                          | If True, throttle will be used to arm.                                                                                                                                                                                                               |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 3      | arm_throttle_upper_limit            | get, set, save  | float     | :math:`\text{PU}`        | Upper limit for throttle to arm.                                                                                                                                                                                                                     |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 4      | arm_throttle_lower_limit            | get, set, save  | float     | :math:`\text{PU}`        | Lower limit for throttle to arm.                                                                                                                                                                                                                     |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 5      | disarm_on_throttle                  | get, set, save  | uint8     |                          | If True, throttle will be used to disarm.                                                                                                                                                                                                            |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 6      | disarm_throttle_upper_limit         | get, set, save  | float     | :math:`\text{PU}`        | Upper limit for throttle to disarm.                                                                                                                                                                                                                  |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 7      | disarm_throttle_lower_limit         | get, set, save  | float     | :math:`\text{PU}`        | Lower limit for throttle to disarm.                                                                                                                                                                                                                  |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 8      | consecutive_arming_throttles_to_arm | get, set, save  | uint32    | :math:`\text{throttles}` | Number of consecutive throttles before arming.                                                                                                                                                                                                       |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        || 9     || disarm_behvaior                    || get, set, save || uint8    ||                         || The state that determines how the module will try to come to a stop and what that final drive mode will be. See row below for each state:                                                                                                           |
        ||       ||                                    ||                ||          ||                         || 0 = Coast: The module will coast when it begins disarming by spinning freely and letting drag + friction slow it down. After the song, its final state will remain coasting.                                                                        |
        ||       ||                                    ||                ||          ||                         || 1 = 0V to Coast: The Module will drive itself to 0V when it begins disarming, actively trying to come to a rapid stop. After the song, its final state will be to coast.                                                                            |
        ||       ||                                    ||                ||          ||                         || 2 = 0V to Brake: The Module will drive itself to 0V when it begins disarming, actively trying to come to a rapid stop. After the song, its final state will be to brake.                                                                            |
        ||       ||                                    ||                ||          ||                         || 3 = Stow: The module will trigger a move to the stow postiion when it begins disarming. After the song, its final state will be determined by whatever the stow postiion feature is configured to do after completing a stow.                       |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        || 10    || disarm_song_option                 || get, set, save || uint8    ||                         || The state that determines if and how many times the module will play its disarm song after coming to a stop. See row below for each state:                                                                                                          |
        ||       ||                                    ||                ||          ||                         || 0 = Never Play: The disarm song is skipped entirely, and the module will transition directly to its final state after stopping.                                                                                                                     |
        ||       ||                                    ||                ||          ||                         || 1 = Play Once: The disarm song will play once, and then the module will transition to its final state.                                                                                                                                              |
        ||       ||                                    ||                ||          ||                         || 2 = Play Continuously: The disarm song will play continuously until the module is armed again or commanded to sping without arming through IQUART. The song will never finish, so the module will never transtion to its final state.               |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        || 11    || manual_arming_throttle_source      || get, set, save || uint8    ||                         || The :ref:`throttle source <throttle_sources>` used as its armed throttle source for manual arming. The default manual throttle source is Unknown. In order to use manual arming, a throttle source must be set first. See row below for each state: |
        ||       ||                                    ||                ||          ||                         || 0 = Unknown: Default configuration. There will be no throttle source if you manually arm, so don't leave this as Unknown if you are manuall arming.                                                                                                 |
        ||       ||                                    ||                ||          ||                         || 1 = :ref:`Hobby <manual_hobby>`                                                                                                                                                                                                                     |
        ||       ||                                    ||                ||          ||                         || 2 = :ref:`DroneCAN <manual_dronecan>`                                                                                                                                                                                                               |
        ||       ||                                    ||                ||          ||                         || 3 = :ref:`IQUART <manual_iquart>`                                                                                                                                                                                                                   |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
        | 12     | motor_armed                         | get, set        | uint8     |                          | Returns True if motor is armed.                                                                                                                                                                                                                      |
        +--------+-------------------------------------+-----------------+-----------+--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Type ID 87 | Stopping Handler
=================================================
    .. table:: Stopping Handler
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------+----------------+-----------+-----------------------------+--------------------------------------------------------------------------------------------+
        | Sub ID | Short Name    | Access         | Data Type | Unit                        | Note                                                                                       |
        +========+===============+================+===========+=============================+============================================================================================+
        | 0      | stopped_speed | get, set, save | float     | :math:`\frac{\text{rad}}{s}`| The speed at which the module needs to spin at or below to be considered stopped.          |
        +--------+---------------+----------------+-----------+-----------------------------+--------------------------------------------------------------------------------------------+
        | 1      | stopped_time  | get, set, save | float     | :math:`s`                   | The amount of time the module needs to spin at its stopped_speed to be considered stopped. |
        +--------+---------------+----------------+-----------+-----------------------------+--------------------------------------------------------------------------------------------+

Type ID 88 | IQUART Flight Controller Interface
=================================================
    .. table:: IQUART Flight Controller Interface
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+--------------+----------------+-------------------------------------------------------------+-------------------------------+-------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name   | Access         | Data Type                                                   | Unit                          | Note                                                                                                              |
        +========+==============+================+=============================================================+===============================+===================================================================================================================+
        | 1      | telemetry    | get            | See :ref:`IFCITelemetryData struct<ifcitelemetrydata_note>` | :math:`\text{16 Byte Array}`  | Returns 16 bytes of telemetry information. See the :ref:`IFCITelemetryData struct<ifcitelemetrydata_note>` notes. |
        +--------+--------------+----------------+-------------------------------------------------------------+-------------------------------+-------------------------------------------------------------------------------------------------------------------+
        | 2      | throttle_cvi | get, set, save | uint8                                                       | :math:`\text{Index [0, 255]}` | The control value index for the throttle.                                                                         |
        +--------+--------------+----------------+-------------------------------------------------------------+-------------------------------+-------------------------------------------------------------------------------------------------------------------+
        | 3      | x_cvi        | get, set, save | uint8                                                       | :math:`\text{Index [0, 255]}` | The control value index value for the x rectangular coordinate.                                                   |
        +--------+--------------+----------------+-------------------------------------------------------------+-------------------------------+-------------------------------------------------------------------------------------------------------------------+
        | 4      | y_cvi        | get, set, save | uint8                                                       | :math:`\text{Index [0, 255]}` | The control value index value for the y rectangular coordinate.                                                   |
        +--------+--------------+----------------+-------------------------------------------------------------+-------------------------------+-------------------------------------------------------------------------------------------------------------------+

Type ID 89 | Pulsing Rectangular Input Parser
=================================================
    .. table:: Pulsing Rectangular Input Parser
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+-----------------------+----------------+-----------+----------------------+---------------------------------------------------------------------+
        | Sub ID | Short Name            | Access         | Data Type | Unit                 | Note                                                                |
        +========+=======================+================+===========+======================+=====================================================================+
        | 0      | pulsing_voltage_mode  | get, set, save | uint8     | :math:`\text{Enum}`  | 0 = Supply Voltage Mode, 1 = Voltage Limit Mode                     |
        +--------+-----------------------+----------------+-----------+----------------------+---------------------------------------------------------------------+
        | 1      | pulsing_voltage_limit | get, set, save | float     | :math:`V`            | This sets the max pulsing voltage limit when in Voltage Limit Mode. |
        +--------+-----------------------+----------------+-----------+----------------------+---------------------------------------------------------------------+

Type ID 90 | GPIO Controller
=================================================
    .. table:: GPIO Controller
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | Sub ID | Short Name                       | Access         | Data Type | Unit | Note                                                       |
        +========+==================================+================+===========+======+============================================================+
        | 0      | mode_register                    | get, set, save | uint8     |      | Access to the GPIO Modes register                          |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 1      | inputs_register                  | get            | uint8     |      | Access to the GPIO Inputs register                         |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 2      | outputs_register                 | get, set, save | uint8     |      | Access to the GPIO Outputs Register                        |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 3      | use_pull_register                | get, set, save | uint8     |      | Access to the GPIO Use-Pull Register                       |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 4      | pull_type_register               | get, set, save | uint8     |      | Access to the GPIO Pull Type Register                      |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 5      | push_pull_open_drain_register    | get, set, save | uint8     |      | Access to the GPIO PP/OD Register                          |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 6      | addressable_gpio_mode            | set            | uint8     |      | Addressable write access to a single GPIO's Mode           |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 7      | addressable_outputs              | set            | uint8     |      | Addressable write access to a single GPIO's Output         |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 8      | addressable_use_pull             | set            | uint8     |      | Addressable write access to a single GPIO's Use Pull Value |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 9      | addressable_pull_type            | set            | uint8     |      | Addressable write access to a single GPIO's PUll Type      |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+
        | 10     | addressable_push_pull_open_drain | get, set, save | uint8     |      | Addressable write access to a single GPIO's PP/OD Mode     |
        +--------+----------------------------------+----------------+-----------+------+------------------------------------------------------------+

Type ID 91 | ADC Interface
=================================================
    .. table:: ADC Interface
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+-------------+--------+-----------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+
        | Sub ID | Short Name  | Access | Data Type | Unit                  | Note                                                                                                                            |
        +========+=============+========+===========+=======================+=================================================================================================================================+
        | 0      | adc_voltage | get    | float     |:math:`{\text{Volts}}` | Read only access to input analog voltage                                                                                        |
        +--------+-------------+--------+-----------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+
        | 1      | raw_value   | get    | uint16    |                       | Read only access to raw ADC value. Ex: 1V to ADC interface would return 1241: (:math:`\frac{V_{\text{in}} * 4096}{3.3}`)        |
        +--------+-------------+--------+-----------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------+

Type ID 92 | PWM Interface
=================================================
    .. table:: PWM Interface
        :widths: 8 18 15 10 5 50
        :class: tight-table

        +--------+---------------+----------------+-----------+---------------------+--------------------------------------------------------------+
        | Sub ID | Short Name    | Access         | Data Type | Unit                | Note                                                         |
        +========+===============+================+===========+=====================+==============================================================+
        | 0      | pwm_frequency | get, set, save | uint32    | :math:`\text{Hz}`   | Frequency between 1Hz and 5000Hz                             |
        +--------+---------------+----------------+-----------+---------------------+--------------------------------------------------------------+
        | 1      | duty_cycle    | get, set, save | uint8     |                     | The percentage of the full cycle that represents high or low |
        +--------+---------------+----------------+-----------+---------------------+--------------------------------------------------------------+
        | 2      | pwm_mode      | get, set, save | uint8     |                     | Determines which portion of PWM cycle represents high or low |
        +--------+---------------+----------------+-----------+---------------------+--------------------------------------------------------------+